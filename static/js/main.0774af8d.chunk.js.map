{"version":3,"sources":["components/LengthController/LengthController.js","components/Arc/Arc.js","components/Timer/Timer.js","components/TimerController/TimerController.js","App.js","serviceWorker.js","index.js"],"names":["LengthController","_ref","type","length","onUpdateLength","isRunning","react_default","a","createElement","className","id","concat","onClick","disabled","Arc","Timer","timerType","timer","minutes","Math","floor","seconds","timeLeft","warnStyle","shadow1","boxShadow","shadow2","color","style","components_Arc_Arc","TimerController","onCountDown","onResetTimer","App","state","sessionTime","breakTime","audioRef","React","createRef","handleUpdateLength","action","timeType","_this","setState","prevState","Object","defineProperty","handleUpdateTimer","handleCountDown","clearInterval","countDown","startCountDown","handleReset","current","currentTime","pause","this","_ref3","play","changeTimer","_this2","setInterval","timeCheck","_this$state","components_LengthController_LengthController","components_Timer_Timer","components_TimerController_TimerController","src","preload","ref","href","target","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0774af8d.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './LengthController.css';\r\n\r\nconst LengthController = ({ type, length, onUpdateLength, isRunning }) => (\r\n  <div className=\"length-ctrl\">\r\n    <div id={`${type}-label`} className=\"length-label\">{`${type} Length`}</div>\r\n    <div className=\"length-buttons\">\r\n      <button\r\n        className=\"length-btn-inc\"\r\n        id={`${type}-increment`}\r\n        onClick={() => onUpdateLength(type, 'inc')}\r\n        disabled={length >= 60 || isRunning ? true : false}\r\n      >\r\n        <i className=\"icon ion-md-arrow-dropup\" />\r\n      </button>\r\n      <div id={`${type}-length`} className=\"length\">\r\n        {length}\r\n      </div>\r\n      <button\r\n        className=\"length-btn-dec\"\r\n        id={`${type}-decrement`}\r\n        onClick={() => onUpdateLength(type, 'dec')}\r\n        disabled={length <= 1 || isRunning ? true : false}\r\n      >\r\n        <i className=\"icon ion-md-arrow-dropdown\" />\r\n      </button>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nLengthController.propTypes = {\r\n  type: PropTypes.string.isRequired,\r\n  length: PropTypes.number.isRequired,\r\n  onUpdateLength: PropTypes.func.isRequired,\r\n  isRunning: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default LengthController;\r\n","import React from 'react';\r\nimport './Arc.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Arc = ({ isRunning }) => (\r\n  <div className={`arc arc-1 ${!isRunning && 'pause-anim'}`}>\r\n    <div className={`arc arc-2 ${!isRunning && 'pause-anim'}`}>\r\n      <div className={`arc arc-3 ${!isRunning && 'pause-anim'}`}>\r\n        <div className={`arc arc-4 ${!isRunning && 'pause-anim'}`} />\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nArc.propTypes = {\r\n  isRunning: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default Arc;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Timer.css';\r\nimport Arc from '../Arc/Arc';\r\n\r\nconst Timer = ({ timerType, timer, isRunning }) => {\r\n  const minutes = Math.floor(timer / 60);\r\n  const seconds = timer % 60;\r\n  const timeLeft = `${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\r\n\r\n  const warnStyle = {\r\n    shadow1: {\r\n      boxShadow: '0 0 5rem rgba(255, 0, 0, 0.7)'\r\n    },\r\n    shadow2: {\r\n      boxShadow: '0 0 4rem 2rem rgba(255, 0, 0, 0.7), inset 0 0 3px 8px rgba(255, 0, 0, 0.7)'\r\n    },\r\n    color: {\r\n      color: 'red'\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className=\"timer-container\">\r\n      <div id=\"timer-label\" className=\"timer-label\">\r\n        <i className=\"icon ion-ios-timer\" /> {timerType}\r\n      </div>\r\n      <div className=\"timer-box\" style={timer < 60 ? warnStyle.shadow1 : {}}>\r\n        <Arc isRunning={isRunning}/>\r\n        <div className=\"timer\" style={timer < 60 ? warnStyle.shadow2 : {}}>\r\n          <div\r\n            id=\"time-left\"\r\n            className=\"time-left-label\"\r\n            style={timer < 60 ? warnStyle.color : {}}\r\n          >\r\n            {timeLeft}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nTimer.propTypes = {\r\n  timerType: PropTypes.string.isRequired,\r\n  timer: PropTypes.number.isRequired\r\n};\r\n\r\nexport default Timer;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './TimerController.css';\r\n\r\nconst TimerController = ({ onCountDown, isRunning, onResetTimer }) => (\r\n  <div className=\"timer-controller\">\r\n    <div className=\"btn-box btn-box-playstop\">\r\n      <span className=\"curve-line\" />\r\n      <button id=\"start_stop\" onClick={() => onCountDown()}>\r\n        {isRunning ? (\r\n          <i className=\"icon ion-md-pause\" />\r\n        ) : (\r\n          <i className=\"icon ion-md-play\" />\r\n        )}\r\n      </button>\r\n      <span className=\"short-line\" />\r\n    </div>\r\n    <div className=\"btn-box\">\r\n      <span />\r\n      <button id=\"reset\" onClick={() => onResetTimer()}>\r\n        <i className=\"icon ion-md-sync\" />\r\n      </button>\r\n      <span className=\"short-line\" />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nTimerController.propTypes = {\r\n  onCountDown: PropTypes.func.isRequired,\r\n  isRunning: PropTypes.bool.isRequired,\r\n  onResetTimer: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TimerController;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport LengthController from './components/LengthController/LengthController';\r\nimport Timer from './components/Timer/Timer';\r\nimport TimerController from './components/TimerController/TimerController';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    sessionTime: 25,\r\n    breakTime: 5,\r\n    timer: 1500,\r\n    timerType: 'session',\r\n    isRunning: false\r\n  };\r\n\r\n  audioRef = React.createRef();\r\n\r\n  handleUpdateLength = (type, action) => {\r\n    const timeType = type === 'session' ? 'sessionTime' : 'breakTime';\r\n    const { isRunning } = this.state;\r\n\r\n    if (isRunning) return;\r\n\r\n    if (action === 'inc') {\r\n      this.setState(prevState => ({\r\n        [timeType]: prevState[timeType] + 1\r\n      }));\r\n    } else if (action === 'dec') {\r\n      this.setState(prevState => ({\r\n        [timeType]: prevState[timeType] - 1\r\n      }));\r\n    }\r\n\r\n    if (type === 'session') {\r\n      this.handleUpdateTimer();\r\n    }\r\n  };\r\n\r\n  handleUpdateTimer() {\r\n    this.setState(prevState => ({\r\n      timer: prevState.sessionTime * 60\r\n    }));\r\n  }\r\n\r\n  handleCountDown = () => {\r\n    const { isRunning } = this.state;\r\n\r\n    if (!isRunning) {\r\n      this.setState(prevState => ({\r\n        isRunning: !prevState.isRunning\r\n      }));\r\n      this.startCountDown();\r\n    } else {\r\n      this.setState(prevState => ({\r\n        isRunning: !prevState.isRunning\r\n      }));\r\n      clearInterval(this.countDown);\r\n    }\r\n  };\r\n\r\n  changeTimer() {\r\n    this.setState(({ timerType, breakTime, sessionTime }) => {\r\n      if (timerType === 'session') {\r\n        return { timer: breakTime * 60, timerType: 'break' };\r\n      } else {\r\n        return { timer: sessionTime * 60, timerType: 'session' };\r\n      }\r\n    });\r\n\r\n    clearInterval(this.countDown);\r\n    this.startCountDown();\r\n  }\r\n\r\n  timeCheck() {\r\n    const { timer } = this.state;\r\n    if (timer < 0) {\r\n      this.audioRef.current.play();\r\n      this.changeTimer();\r\n    }\r\n  }\r\n\r\n  startCountDown() {\r\n    this.countDown = setInterval(() => {\r\n      this.setState(prevState => ({\r\n        timer: prevState.timer - 1\r\n      }));\r\n      this.timeCheck();\r\n    }, 1000);\r\n  }\r\n\r\n  handleReset = () => {\r\n    clearInterval(this.countDown);\r\n    this.audioRef.current.currentTime = 0;\r\n    this.audioRef.current.pause();\r\n    this.setState(() => ({\r\n      sessionTime: 25,\r\n      breakTime: 5,\r\n      timer: 1500,\r\n      timerType: 'session',\r\n      isRunning: false\r\n    }));\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.countDown);\r\n  }\r\n\r\n  render() {\r\n    const { sessionTime, breakTime, timer, timerType, isRunning } = this.state;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <h1 className=\"app-title\">Pomodoro Clock</h1>\r\n        <div className=\"length-ctrl-box\">\r\n          <LengthController\r\n            type=\"session\"\r\n            length={sessionTime}\r\n            onUpdateLength={this.handleUpdateLength}\r\n            isRunning={isRunning}\r\n          />\r\n          <LengthController\r\n            type=\"break\"\r\n            length={breakTime}\r\n            onUpdateLength={this.handleUpdateLength}\r\n            isRunning={isRunning}\r\n          />\r\n        </div>\r\n        <div className=\"time\">\r\n          <Timer timerType={timerType} timer={timer} isRunning={isRunning} />\r\n          <TimerController\r\n            onCountDown={this.handleCountDown}\r\n            isRunning={isRunning}\r\n            onResetTimer={this.handleReset}\r\n          />\r\n        </div>\r\n        <audio\r\n          id=\"beep\"\r\n          src=\"https://res.cloudinary.com/dpc8imgk1/video/upload/v1547455581/alarm.mp3\"\r\n          type=\"audio/mpeg\"\r\n          preload=\"auto\"\r\n          ref={this.audioRef}\r\n        />\r\n        <footer className=\"footer\">\r\n          <p>\r\n            Created by:{' '}\r\n            <a\r\n              className=\"footer-link\"\r\n              href=\"https://twitter.com/rmasianjr\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Ricardo Masian Jr.\r\n            </a>{' '}\r\n            |{' '}\r\n            <a\r\n              className=\"footer-link\"\r\n              href=\"https://github.com/rmasianjr/pomodoro-clock\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              View source code\r\n            </a>\r\n          </p>\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}